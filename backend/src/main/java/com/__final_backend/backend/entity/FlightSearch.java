package com.__final_backend.backend.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.time.LocalDateTime;

/**
 * Entity representing a flight search performed by a user.
 * <p>
 * This entity tracks user search criteria for flights, including origin and
 * destination
 * airports, travel dates, number of travelers, and search type (one-way or
 * round trip).
 * It provides valuable data for analytics on user search patterns and
 * preferences.
 * <p>
 * Maps to the 'flight_searches' table in the database.
 */
@Entity
@Table(name = "flight_searches")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class FlightSearch {
  /**
   * Unique identifier for the flight search.
   * <p>
   * Automatically generated by the database.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  /**
   * The user who performed this flight search.
   * <p>
   * Many-to-one relationship with the User entity. Each search is associated
   * with one user, while a user can perform multiple searches.
   * This field can be null if the search was performed by an unauthenticated
   * user.
   * Configured for lazy loading to optimize performance.
   */
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "user_id")
  private User user;

  /**
   * IATA airport code for the departure location.
   * <p>
   * Three-letter code identifying the departure airport, e.g., "JFK" for John F.
   * Kennedy International Airport.
   */
  @Column(nullable = false, length = 3)
  private String origin;

  /**
   * IATA airport code for the arrival location.
   * <p>
   * Three-letter code identifying the arrival airport, e.g., "LAX" for Los
   * Angeles International Airport.
   */
  @Column(nullable = false, length = 3)
  private String destination;

  /**
   * The date when the user wants to depart.
   * <p>
   * Required field for all searches.
   */
  @Column(name = "departure_date", nullable = false)
  private LocalDate departureDate;

  /**
   * The date when the user wants to return.
   * <p>
   * Optional field, will be null for one-way trips.
   */
  @Column(name = "return_date")
  private LocalDate returnDate;

  /**
   * Number of people traveling in this itinerary.
   * <p>
   * Used to determine seat availability and calculate total price.
   */
  @Column(name = "number_of_travelers", nullable = false)
  private Integer numberOfTravelers;

  /**
   * Type of trip being searched.
   * <p>
   * Common values include "ONE_WAY" or "ROUND_TRIP". Limited to 20 characters.
   */
  @Column(name = "trip_type", nullable = false, length = 20)
  private String tripType;

  /**
   * Timestamp indicating when this search was performed.
   * <p>
   * Automatically set by the {@link #onCreate()} method during entity creation.
   */
  @Column(name = "search_time", nullable = false)
  private LocalDateTime searchTime;

  /**
   * Lifecycle callback method executed before persisting the entity.
   * <p>
   * This method automatically sets the searchTime timestamp to the current date
   * and time
   * when a new FlightSearch entity is created, providing an accurate record of
   * when
   * each search was performed.
   */
  @PrePersist
  protected void onCreate() {
    this.searchTime = LocalDateTime.now();
  }
}