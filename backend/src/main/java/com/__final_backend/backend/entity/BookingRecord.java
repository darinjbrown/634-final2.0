package com.__final_backend.backend.entity;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import jakarta.persistence.*;
import java.math.BigDecimal;
import java.time.LocalDateTime;

/**
 * Entity representing a flight booking record.
 * <p>
 * This entity stores information about flight reservations made by users,
 * including flight
 * details, passenger information, pricing, and booking status. Each record
 * represents a confirmed
 * booking in the system and is used to track reservations throughout their
 * lifecycle.
 * <p>
 * Maps to the 'booking_records' table in the database.
 */
@Entity
@Table(name = "booking_records")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class BookingRecord {
  /**
   * Unique identifier for the booking record.
   * <p>
   * Automatically generated by the database.
   */
  @Id
  @GeneratedValue(strategy = GenerationType.IDENTITY)
  private Long id;

  /**
   * The user who made this booking.
   * <p>
   * Many-to-one relationship with the User entity. Each booking is associated
   * with one user, while a user can have multiple bookings.
   * Configured for lazy loading to optimize performance.
   */
  @ManyToOne(fetch = FetchType.LAZY)
  @JoinColumn(name = "user_id")
  private User user;

  /**
   * Unique reference code for this booking.
   * <p>
   * This alphanumeric identifier is used by airline systems and passengers
   * to reference and look up the booking. Also commonly known as a PNR
   * (Passenger Name Record) or confirmation code.
   * <p>
   * Example: "ABC123XYZ" or "SMITH7890123"
   */
  @Column(name = "booking_reference", nullable = false, unique = true, length = 20)
  private String bookingReference;

  /**
   * IATA code of the airline operating this flight.
   * <p>
   * Three-letter identification code, e.g., "AAL" for American Airlines.
   */
  @Column(name = "airline_code", nullable = false, length = 3)
  private String airlineCode;
  /**
   * Flight number or identifier.
   * <p>
   * Typically consists of airline code followed by numbers, e.g., "AA123".
   */
  @Column(name = "flight_number", nullable = false, length = 10)
  private String flightNumber;

  /**
   * IATA airport code for the departure location.
   * <p>
   * Three-letter code identifying the departure airport, e.g., "JFK" for John F.
   * Kennedy International Airport.
   */
  @Column(nullable = false, length = 3)
  private String origin;

  /**
   * IATA airport code for the arrival location.
   * <p>
   * Three-letter code identifying the arrival airport, e.g., "LAX" for Los
   * Angeles International Airport.
   */
  @Column(nullable = false, length = 3)
  private String destination;

  /**
   * Scheduled departure date and time of the flight.
   * <p>
   * Stored as a LocalDateTime value in the system's time zone.
   */
  @Column(name = "departure_time", nullable = false)
  private LocalDateTime departureTime;

  /**
   * Scheduled arrival date and time of the flight.
   * <p>
   * Stored as a LocalDateTime value in the system's time zone.
   */
  @Column(name = "arrival_time", nullable = false)
  private LocalDateTime arrivalTime;
  /**
   * Number of passengers included in this booking.
   * <p>
   * Used to determine seat allocation and calculate the total price.
   */
  @Column(name = "passenger_count", nullable = false)
  private Integer passengerCount;

  /**
   * Total price for all passengers in this booking.
   * <p>
   * Stored with precision of 10 digits and scale of 2 decimal places.
   * This represents the final amount paid by the user.
   */
  @Column(name = "total_price", nullable = false, precision = 10, scale = 2)
  private BigDecimal totalPrice;

  /**
   * Current status of the booking.
   * <p>
   * Common values include "CONFIRMED", "CANCELLED", "CHECKED_IN", etc.
   * Default value is "CONFIRMED" at creation time.
   */
  @Column(name = "booking_status", nullable = false, length = 20)
  private String bookingStatus = "CONFIRMED";

  /**
   * Timestamp indicating when this booking was created.
   * <p>
   * Set automatically by the {@link #onCreate()} method and marked as
   * non-updatable
   * to preserve the historical record of when the booking was initially made.
   */
  @Column(name = "created_at", nullable = false, updatable = false)
  private LocalDateTime createdAt;

  /**
   * Lifecycle callback method executed before persisting the entity.
   * <p>
   * This method automatically sets the createdAt timestamp to the current date
   * and time
   * when a new BookingRecord entity is created, providing an accurate record of
   * when
   * the booking was initially made in the system.
   */
  @PrePersist
  protected void onCreate() {
    this.createdAt = LocalDateTime.now();
  }
}